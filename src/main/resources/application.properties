# Camelケースをアンスコにする（クラス：Camel、テーブル：アンスコ）
mybatis.configuration.map-underscore-to-camel-case=true
# SQLite接続設定
spring.datasource.driver-class-name=org.sqlite.JDBC
spring.datasource.url=jdbc:sqlite:/Users/sim/Documents/eclipse_workspace/spring-simcookietest/sqlite3/simcookie.sqlite3
# Okta OpenID Connect 関連
spring.security.oauth2.client.provider.okta.issuer-uri=${TENANTURL}/oauth2/default
spring.security.oauth2.client.provider.okta.authorization-uri=${TENANTURL}/oauth2/default/v1/authorize
spring.security.oauth2.client.provider.okta.token-uri=${TENANTURL}//oauth2/default/v1/token
spring.security.oauth2.client.provider.okta.user-info-uri=${TENANTURL}/oauth2/default/v1/userinfo
spring.security.oauth2.client.provider.okta.jwk-set-uri=${TENANTURL}/oauth2/default/v1/keys
# 以下変数はベタガキにしない。環境変数から読み込む
spring.security.oauth2.client.registration.okta.client-id=${CLIENT_ID}
spring.security.oauth2.client.registration.okta.client-secret=${CLIENT_SECRET}
## これ設定しないとinvalid_scope~'scope' must be providedて怒られる（マニュアルなどにのってないけど。。）
## Okta管理コンソール-Security-API-DefaultCustom認可サーバ-Sopeから対象Scope名（name)を指定する（必要なものだけ）。
spring.security.oauth2.client.registration.okta.scope=openid,profile,address,phone,device_sso,email,offline_access
#jwt.JwtDecoder型のbean定義
okta.oauth2.issuer=${TENANTURL}/oauth2/default